_G.Disabled = true -- Desabilita o script original

local originalHeadSize = Vector3.new(2, 1, 1) -- Tamanho padrão da cabeça
local originalHumanoidRootPartSize = Vector3.new(2, 2, 1) -- Tamanho padrão do HumanoidRootPart

local function revertHitbox(character)
    if character then
        local head = character:FindFirstChild("Head")
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

        if head then
            local mesh = head:FindFirstChildOfClass("SpecialMesh")
            if mesh then
                mesh:Destroy() -- Remove o SpecialMesh
            end
            head.Size = originalHeadSize
            head.CanCollide = true -- Reativa a colisão para a cabeça
            head.Transparency = 0 -- Remove a transparência
            -- Remove qualquer outro SpecialMesh que possa estar causando problemas
            for _, v in pairs(head:GetChildren()) do
                if v:IsA("SpecialMesh") then
                    v:Destroy()
                end
            end
        end

        if humanoidRootPart then
            humanoidRootPart.Size = originalHumanoidRootPartSize
            humanoidRootPart.CanCollide = true -- Reativa a colisão
            humanoidRootPart.Transparency = 0 -- Remove a transparência
            humanoidRootPart.BrickColor = BrickColor.new("Medium stone grey") -- Cor padrão
            humanoidRootPart.Material = Enum.Material.Plastic -- Material padrão
        end

        -- Reverter todas as outras partes que possam ter sido modificadas
        for _, part in ipairs(character:GetChildren()) do
            if part:IsA("BasePart") and part ~= head and part ~= humanoidRootPart then
                part.CanCollide = true
                part.Transparency = 0
            end
        end
    end
end

local function onCharacterAdded(character)
    -- Aguarde o carregamento completo do personagem
    character:WaitForChild("Humanoid")

    -- Reverte as partes
    revertHitbox(character)

    -- Conecte-se ao evento Died do Humanoid para tratar o respawn
    character:WaitForChild("Humanoid").Died:Connect(function()
        -- Aguarde o respawn do personagem
        character:WaitForChild("Humanoid").Died:Wait()

        -- Reverte as partes novamente após o respawn
        revertHitbox(character)
    end)
end

local function onPlayerAdded(player)
    -- Conecte-se ao evento CharacterAdded
    player.CharacterAdded:Connect(onCharacterAdded)

    -- Aplique a reversão se o personagem já existir
    if player.Character then
        onCharacterAdded(player.Character)
    end
end

-- Conecte-se ao evento PlayerAdded para lidar com jogadores entrando no jogo
game:GetService('Players').PlayerAdded:Connect(onPlayerAdded)

-- Aplique a reversão a todos os jogadores atuais
for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
    onPlayerAdded(player)
end

-- Loop contínuo para garantir que as hitboxes permaneçam no estado original
game:GetService('RunService').RenderStepped:Connect(function()
    for _, player in pairs(game:GetService('Players'):GetPlayers()) do
        pcall(function() 
            revertHitbox(player.Character)
        end)
    end
end)

-- Desative a colisão com o personagem do jogador local
local localPlayer = game:GetService('Players').LocalPlayer

local function disableCollision(character)
    local head = character:FindFirstChild("Head")
    if head then
        head.CanCollide = true
    end
end

localPlayer.CharacterAdded:Connect(disableCollision)

if localPlayer.Character then
    disableCollision(localPlayer.Character)
end
